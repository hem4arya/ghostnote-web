-- Add title and body embedding columns to the notes table
-- These vectors will be generated by the 'generate-embedding' function
-- and used by the 'note-similarity' function.

-- Ensure the vector extension is enabled
CREATE EXTENSION IF NOT EXISTS vector;

-- Add embedding columns to the notes table
ALTER TABLE notes
ADD COLUMN title_embedding vector(384),
ADD COLUMN body_embedding vector(384);

-- Create an SQL function to calculate the weighted similarity score
CREATE OR REPLACE FUNCTION calculate_similarity_score(
    note1_id UUID,
    note2_id UUID
)
RETURNS TABLE (
    similarity_score REAL
) AS $$
DECLARE
    title_sim REAL;
    body_sim REAL;
    weighted_score REAL;
    note1_title_embedding vector(384);
    note1_body_embedding vector(384);
    note2_title_embedding vector(384);
    note2_body_embedding vector(384);
BEGIN
    -- Fetch embeddings for the first note
    SELECT title_embedding, body_embedding
    INTO note1_title_embedding, note1_body_embedding
    FROM notes
    WHERE id = note1_id;

    -- Fetch embeddings for the second note
    SELECT title_embedding, body_embedding
    INTO note2_title_embedding, note2_body_embedding
    FROM notes
    WHERE id = note2_id;

    -- Calculate cosine similarity for titles (1 - cosine distance)
    -- Handle NULL embeddings gracefully
    IF note1_title_embedding IS NULL OR note2_title_embedding IS NULL THEN
        title_sim := 0;
    ELSE
        title_sim := 1 - (note1_title_embedding <=> note2_title_embedding);
    END IF;

    -- Calculate cosine similarity for bodies
    IF note1_body_embedding IS NULL OR note2_body_embedding IS NULL THEN
        body_sim := 0;
    ELSE
        body_sim := 1 - (note1_body_embedding <=> note2_body_embedding);
    END IF;

    -- Calculate weighted score (30% title, 70% body)
    weighted_score := (0.3 * title_sim) + (0.7 * body_sim);

    -- Return the score scaled to 0-100
    RETURN QUERY SELECT LEAST(GREATEST(weighted_score * 100, 0), 100)::REAL;
END;
$$ LANGUAGE plpgsql;
