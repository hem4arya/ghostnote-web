Refine the prompt : You are an expert software engineer tasked with refactoring the homepage structure for improved modularity, maintainability, and isolation.

[ IMPORTANT : HAVE A LOOK AT THE CODEBASE BE YOURSELF THE PROMPT BELOW IS JUST FOR REFERENCE ACT Think like a long-term teammate—prioritize readability, scalability, and zero-friction AN  theming.]

Review the files in app/BACKUP/ (from my old commit) to understand the original homepage implementation. Specifically analyze how these files:

Reference global.css:

Map CSS naming conventions to HTML elements

Identify color schemes (text/bg/hover states)

Extract animation logic and timing

Note background treatments (gradients/images)

Replicate in Current Site:

Implement identical styling patterns for:

Color system (primary/secondary/hover values)

Interactive states (button/link hover effects)

Animation behaviors (transitions/transforms)

Responsive design approach

Maintain CSS class naming consistency where possible

Ensure visual parity with backup homepage components

Key Requirements:

Prioritize global.css relationships from backup files

Preserve original aesthetic (verified via backup rendering)

Document any naming convention changes needed for integration

Target homepage components exclusively"




Your current task is to reorganize all the homepage-related logic, design, components, and utilities into a new, self-contained folder, while leaving only the main `page.tsx` at the root (e.g., `app/page.tsx`) to serve as the entry point.

---

### Current Homepage Files

**Main Entry File:**
- `page.tsx` – Defines the homepage structure and logic.

**Design & Components:**
- `Hero.tsx` – Hero section at the top.
- `NoteCard.tsx` – Represents individual cards displayed on homepage.
- `Footer.tsx` – Footer component.

**Modal & Auth Logic:**
- `AuthModal.tsx` – Authentication modal UI and logic.

**Data:**
- `sampleNotes.ts` – Demo data for the homepage.

---

Use and include our Theme-System for this, strucutre the files of this folder in a way to use our Theme-System
Restrucutre just like we restrured the Navbar have a look at the Navbar folder for an example of how to structure your components. 
### New Folder Structure to be Created:

Create a new directory:  
`src/components/homepage/`  

Inside this folder, organize the files as follows:

#### `src/components/homepage/sections/`
- Move `Hero.tsx`, `Footer.tsx`, and `NoteCard.tsx` here.

#### `src/components/homepage/modals/`
- Move `AuthModal.tsx` here.

#### `src/components/homepage/data/`
- Move `sampleNotes.ts` here.

#### `src/components/homepage/styles/`
- Extract all homepage-specific styles from `globals.css` and place them in `homepage.module.css` and optionally a `homepage-global.css` here.

#### `src/components/homepage/types/` _(if any types are defined inline)_
- Extract homepage-specific TypeScript types into `types.ts`.

#### `src/components/homepage/index.ts`
- Export all relevant subcomponents and utilities from this index file for clean external import. For example:

```ts
export * from './sections/Hero';
export * from './sections/Footer';
export * from './sections/NoteCard';
export * from './modals/AuthModal';
export * from './data/sampleNotes';
export * from './types';
Final Integration:
app/page.tsx should now import everything cleanly from src/components/homepage.

Additional Instructions:
Ensure all imports inside page.tsx are updated to reflect the new structure.



Solve all existing lint, type, and runtime errors.

Run all ESLint, TypeScript, and build checks. Address and resolve any additional errors or inconsistencies discovered during this process.

Remove the BACKUP FOLDER and files inside the folder.

