The Reader View page I created has a sophisticated, clean design optimized for distraction-free reading:

Header Section
Fixed navigation bar at the top with a subtle backdrop blur effect and cyber-themed border
GhostNote logo on the left with a beautiful gradient text effect (primary â†’ secondary â†’ accent colors) that's clickable to return home
"Exit Reader" button on the right with an arrow icon for easy navigation back
Note Metadata Area
Large title in gradient text matching the brand colors for premium feel
Author information showing "@sarahchen_dev" handle in a clean, readable format
Purchase timestamp with proper date formatting
Audio intro section (when available) with a play/pause button and descriptive text about the author's introduction
Main PDF Viewer
Full-width card container with elegant borders and subtle shadows
Secure PDF viewer area (currently mocked as a placeholder) designed to prevent downloads/copying
Dynamic watermark positioned at bottom-right showing buyer handle and purchase date with translucent background
Placeholder content includes a document icon, description text, and a badge showing the note title
Action Button Grid
Four responsive buttons in a 2x4 grid (mobile) or 1x4 (desktop):

Favorite button with heart icon that changes color when favorited (red fill when active)
Share button for sharing note metadata (not full content)
Author profile button for viewing creator details
Report button with warning styling (red text/border) for reporting clones
Reading Progress Section
Progress card showing reading statistics
Animated progress bar that tracks scroll position in real-time
Reading metrics including highlight count and estimated reading time
Visual Enhancements
Scroll progress indicator - a thin bar at the very bottom of the screen that fills with a gradient as you scroll
Responsive design that adapts beautifully to mobile and desktop
Dark mode optimized with proper contrast and semantic color tokens
Consistent spacing and typography hierarchy throughout
Smooth transitions and hover effects on interactive elements
The overall aesthetic is premium, minimalist, and focused entirely on the reading experience while providing essential functionality without clutter.





src/pages/ReaderView.tsx{
  import { useState, useEffect } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import { ArrowLeft, Heart, Share2, User, Flag, Volume2, MoreVertical } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { toast } from "sonner";

// Mock purchased note data
const purchasedNote = {
  id: "1",
  title: "Advanced React Patterns & Performance Optimization",
  author: "Sarah Chen",
  authorHandle: "@sarahchen_dev",
  purchaseDate: "2024-01-15",
  buyerHandle: "@ghost_8xk92",
  pdfUrl: "/sample-note.pdf", // In real app, this would be a secure URL
  hasAudioIntro: true,
  audioUrl: "/intro-audio.mp3",
  isFavorited: false,
  highlights: [] as Array<{ id: string; text: string; page: number; position: number }>
};

const ReaderView = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [scrollProgress, setScrollProgress] = useState(0);
  const [isFavorited, setIsFavorited] = useState(purchasedNote.isFavorited);
  const [isAudioPlaying, setIsAudioPlaying] = useState(false);

  // Mock scroll progress tracking
  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.pageYOffset;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = (scrollTop / docHeight) * 100;
      setScrollProgress(Math.min(100, Math.max(0, progress)));
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const handleFavorite = () => {
    setIsFavorited(!isFavorited);
    toast(isFavorited ? "Removed from favorites" : "Added to favorites");
  };

  const handleShare = () => {
    navigator.clipboard.writeText(`Check out "${purchasedNote.title}" by ${purchasedNote.author} on GhostNote`);
    toast("Note metadata copied to clipboard");
  };

  const handleReportClone = () => {
    toast("Report submitted. We'll investigate and notify the author.");
  };

  const handlePlayAudio = () => {
    setIsAudioPlaying(!isAudioPlaying);
    // In real app, this would control audio playback
    toast(isAudioPlaying ? "Audio paused" : "Playing intro audio");
  };

  return (
    <div className="min-h-screen bg-background text-foreground">
      {/* Header */}
      <div className="sticky top-0 z-50 w-full border-b cyber-border bg-background/95 backdrop-blur-sm">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <Link 
              to="/" 
              className="text-xl font-bold bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent hover:opacity-80 transition-opacity"
            >
              GhostNote
            </Link>
            
            <Button 
              variant="outline" 
              onClick={() => navigate(-1)}
              className="gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              Exit Reader
            </Button>
          </div>
        </div>
      </div>

      {/* Note Metadata */}
      <div className="container mx-auto px-6 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="space-y-4 mb-8">
            <h1 className="text-3xl font-bold bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent leading-tight">
              {purchasedNote.title}
            </h1>
            
            <div className="flex items-center gap-4 text-muted-foreground">
              <span>by <span className="text-foreground font-medium">{purchasedNote.authorHandle}</span></span>
              <Separator orientation="vertical" className="h-4" />
              <span>Purchased on {new Date(purchasedNote.purchaseDate).toLocaleDateString()}</span>
            </div>

            {purchasedNote.hasAudioIntro && (
              <div className="flex items-center gap-3">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handlePlayAudio}
                  className="gap-2"
                >
                  <Volume2 className="h-4 w-4" />
                  {isAudioPlaying ? "Pause" : "Play"} Intro
                </Button>
                <span className="text-sm text-muted-foreground">Author's introduction audio</span>
              </div>
            )}
          </div>

          {/* PDF Viewer */}
          <Card className="note-card mb-8">
            <div className="relative">
              {/* Watermark */}
              <div className="absolute bottom-4 right-4 z-10 bg-background/80 backdrop-blur-sm px-3 py-1 rounded-md text-xs text-muted-foreground border border-border/50">
                {purchasedNote.buyerHandle} â€¢ {new Date(purchasedNote.purchaseDate).toLocaleDateString()}
              </div>
              
              {/* PDF Iframe - In real app, use react-pdf with restrictions */}
              <div className="w-full h-[800px] bg-muted/20 rounded-lg border border-border/50 flex items-center justify-center">
                <div className="text-center space-y-4">
                  <div className="text-6xl">ðŸ“„</div>
                  <div className="text-lg font-medium">PDF Viewer</div>
                  <div className="text-sm text-muted-foreground max-w-md">
                    In a real implementation, this would be a secure PDF viewer using react-pdf 
                    with download, print, and copy protections enabled.
                  </div>
                  <Badge variant="secondary" className="bg-primary/20 text-primary">
                    Viewing: {purchasedNote.title}
                  </Badge>
                </div>
              </div>
            </div>
          </Card>

          {/* Action Buttons */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
            <Button
              variant="outline"
              onClick={handleFavorite}
              className={`gap-2 ${isFavorited ? 'text-red-500 border-red-500/50' : ''}`}
            >
              <Heart className={`h-4 w-4 ${isFavorited ? 'fill-current' : ''}`} />
              {isFavorited ? 'Favorited' : 'Favorite'}
            </Button>

            <Button
              variant="outline"
              onClick={handleShare}
              className="gap-2"
            >
              <Share2 className="h-4 w-4" />
              Share
            </Button>

            <Button
              variant="outline"
              onClick={() => toast("Author profile feature coming soon")}
              className="gap-2"
            >
              <User className="h-4 w-4" />
              Author
            </Button>

            <Button
              variant="outline"
              onClick={handleReportClone}
              className="gap-2 text-destructive border-destructive/50 hover:bg-destructive/10"
            >
              <Flag className="h-4 w-4" />
              Report
            </Button>
          </div>

          {/* Reading Stats */}
          <Card className="note-card p-6">
            <h3 className="font-semibold mb-4">Reading Progress</h3>
            <div className="space-y-3">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Progress</span>
                <span>{Math.round(scrollProgress)}%</span>
              </div>
              <Progress value={scrollProgress} className="h-2" />
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>Highlights: 0</span>
                <span>Reading time: ~20 min</span>
              </div>
            </div>
          </Card>
        </div>
      </div>

      {/* Scroll Progress Indicator */}
      <div className="fixed bottom-0 left-0 w-full h-1 bg-muted/30 z-50">
        <div 
          className="h-full bg-gradient-to-r from-primary to-secondary transition-all duration-150"
          style={{ width: `${scrollProgress}%` }}
        />
      </div>
    </div>
  );
};

export default ReaderView;
}

src/App.tsx{
  import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Index from "./pages/Index";
import Dashboard from "./pages/Dashboard";
import NoteDetail from "./pages/NoteDetail";
import CreateNote from "./pages/CreateNote";
import Settings from "./pages/Settings";
import ReaderView from "./pages/ReaderView";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Index />} />
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/note/:id" element={<NoteDetail />} />
          <Route path="/reader/:id" element={<ReaderView />} />
          <Route path="/create" element={<CreateNote />} />
          <Route path="/settings" element={<Settings />} />
          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
          <Route path="*" element={<NotFound />} />
        </Routes>
      </BrowserRouter>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;

}

src/components/NoteCard.tsx{
  import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

interface NoteCardProps {
  id?: string;
  title: string;
  price: number;
  preview: string;
  category: string;
  author: string;
  rating?: number;
}

const NoteCard = ({ id = "1", title, price, preview, category, author, rating = 5 }: NoteCardProps) => {
  const navigate = useNavigate();
  
  const handlePurchase = () => {
    // Mock purchase process
    toast("Processing purchase...", {
      duration: 2000,
    });
    
    setTimeout(() => {
      toast.success("Purchase successful! Opening reader...");
      // Navigate to reader view after mock purchase
      navigate(`/reader/${id}`);
    }, 2000);
  };
  return (
    <div className="note-card group p-6 h-full flex flex-col">
      {/* Header with category badge */}
      <div className="flex items-start justify-between mb-4">
        <Badge 
          variant="secondary" 
          className="bg-secondary/20 text-secondary border-secondary/30 hover:bg-secondary/30"
        >
          {category}
        </Badge>
        <div className="flex items-center space-x-1 text-xs text-muted-foreground">
          <span>â˜…</span>
          <span>{rating}</span>
        </div>
      </div>

      {/* Note Title */}
      <h3 className="text-lg font-semibold text-foreground mb-3 line-clamp-2 group-hover:text-primary transition-colors">
        {title}
      </h3>

      {/* Preview Text */}
      <p className="text-sm text-muted-foreground flex-1 mb-4 line-clamp-4">
        {preview}
      </p>

      {/* Footer with author and price */}
      <div className="flex items-center justify-between pt-4 border-t border-border/50">
        <div className="text-xs text-muted-foreground">
          by <span className="text-foreground font-medium">{author}</span>
        </div>
        <div className="flex items-center space-x-3">
          <span className="text-lg font-bold text-primary">
            ${price}
          </span>
          <Button 
            size="sm" 
            onClick={handlePurchase}
            className="bg-gradient-to-r from-accent to-accent/80 hover:from-accent/80 hover:to-accent/60 text-accent-foreground"
          >
            Buy Now
          </Button>
        </div>
      </div>

      {/* Hover overlay effect */}
      <div className="absolute inset-0 rounded-xl bg-gradient-to-br from-primary/5 via-transparent to-secondary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
    </div>
  );
};

export default NoteCard;
}

src/pages/Index.tsx{
  import Navbar from "@/components/Navbar";
import NoteCard from "@/components/NoteCard";
import { sampleNotes } from "@/data/sampleNotes";

const Index = () => {
  return (
    <div className="min-h-screen bg-background">
      <Navbar />
      
      {/* Hero Section */}
      <section className="container mx-auto px-6 py-12">
        <div className="text-center mb-12">
          <h1 className="text-5xl font-bold mb-6 bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent">
            Discover Premium Notes
          </h1>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Access curated knowledge from industry experts. Learn from the best,
            master new skills, and accelerate your growth with our marketplace of premium notes.
          </p>
        </div>

        {/* Featured Categories */}
        <div className="flex flex-wrap justify-center gap-3 mb-12">
          {['All', 'Development', 'AI/ML', 'Design', 'Security', 'Interview', 'Writing'].map((category) => (
            <button
              key={category}
              className="px-4 py-2 rounded-full bg-muted/50 text-muted-foreground hover:bg-primary/20 hover:text-primary border border-border/50 hover:border-primary/30 transition-all duration-200"
            >
              {category}
            </button>
          ))}
        </div>

        {/* Notes Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sampleNotes.map((note) => (
            <NoteCard
              key={note.id}
              id={note.id}
              title={note.title}
              price={note.price}
              preview={note.preview}
              category={note.category}
              author={note.author}
              rating={note.rating}
            />
          ))}
        </div>

        {/* Load More Section */}
        <div className="text-center mt-12">
          <button className="px-8 py-3 bg-gradient-to-r from-primary to-secondary hover:from-primary/80 hover:to-secondary/80 text-primary-foreground rounded-lg font-medium transition-all duration-200 hover:shadow-lg">
            Load More Notes
          </button>
        </div>
      </section>
    </div>
  );
};

export default Index;

}